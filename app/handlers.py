from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.helpers import translate_months, translate_to_russian, create_link, check_payment, paste_data, \
    get_available_months
from app.quests import quests
from datetime import datetime

import app.database.requests as rq
import app.keyboards as kb
import re
import gspread
import datetime
import asyncio
import os

router = Router()


class UserState(StatesGroup):
    played = State()
    age = State()
    players = State()
    scary = State()
    playerContact = State()
    quest = State()
    date = State()
    time = State()
    paid = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    tg_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username
    await rq.set_user(tg_id, first_name, username)
    welcome_text = ("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Quest Center. –í—ã–±–µ—Ä–∏ –≤ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —è –ø–æ–¥–µ–ª—é—Å—å –≤–∞–∂–Ω–æ–π "
                    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:")
    await message.answer(welcome_text, reply_markup=kb.main_kb(tg_id), parse_mode='HTML')


@router.callback_query(F.data == 'start')
async def cmd_back_start(callback: CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    welcome_text = ("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Quest Center. –í—ã–±–µ—Ä–∏ –≤ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —è –ø–æ–¥–µ–ª—é—Å—å –≤–∞–∂–Ω–æ–π "
                    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:")
    await callback.message.edit_text(welcome_text, reply_markup=kb.main_kb(callback.from_user.id), parse_mode='HTML')


@router.callback_query(F.data == 'price')
async def price(callback: CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É üí∞"')
    price_text = f'''
–ù–∞ –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –º—ã –≤—ã–¥–µ–ª—è–µ–º <b>2 —á–∞—Å–∞</b>, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å–∞ <b>–æ—Ç 90 –¥–æ 120 –º–∏–Ω—É—Ç</b>. –£ –Ω–∞—Å –Ω–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á, –≤—Å—ë –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –ø–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Å—é–∂–µ—Ç, —á—Ç–æ–±—ã –≤—ã –æ—â—É—Ç–∏–ª–∏ —Å–µ–±—è –≥–µ—Ä–æ–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ —É–∂–∞—Å–æ–≤ üíÄ.

<b>–°—é–∂–µ—Ç—ã</b>:
- <b>¬´–ó–∞–ø—Ä–µ—Ç–Ω–∞—è –∑–æ–Ω–∞¬ª</b>, <b>¬´–ó–≤–æ–Ω–æ–∫¬ª</b>, <b>¬´–ë–µ–ª–∞—è –¥–∞–º–∞¬ª</b> ‚Äî <b>1500‚ÇΩ</b> —Å —á–µ–ª–æ–≤–µ–∫–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: <b>5</b> üîî.
- <b>–ò–≥—Ä–∞ ¬´AMONG US¬ª –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏</b> ‚Äî <b>1200‚ÇΩ</b> —Å —á–µ–ª–æ–≤–µ–∫–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: <b>7</b>.
- <b>¬´–û—Ç –∑–∞–∫–∞—Ç–∞ –¥–æ —Ä–∞—Å—Å–≤–µ—Ç–∞¬ª</b> ‚Äî <b>2500‚ÇΩ</b> —Å —á–µ–ª–æ–≤–µ–∫–∞ (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Ñ–æ–º–∞–Ω—Å, –ø—Ä–∏–Ω–æ—Å–∏—Ç–µ –∑–∞–∫—É—Å–∫–∏ –∏ –Ω–∞–ø–∏—Ç–∫–∏).
- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—é–∂–µ—Ç—ã ‚Äî <b>2000‚ÇΩ</b> —Å —á–µ–ª–æ–≤–µ–∫–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: <b>5</b>.

<b>–í–∞–∂–Ω–æ</b>:
–ï—Å–ª–∏ –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ <b>–º–µ–Ω–µ–µ 4 —á–µ–ª–æ–≤–µ–∫</b>, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ‚Äî <b>6000‚ÇΩ</b>, –∫–∞–∫ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å—é–∂–µ—Ç–æ–≤).
–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–æ–Ω–∏ <b>–ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ</b> - –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞—è <b>3000‚ÇΩ</b>
'''
    await callback.message.edit_text(price_text, reply_markup=kb.price, parse_mode='HTML')


@router.callback_query(F.data == 'select_quest')
async def select_quest(callback: CallbackQuery, state: FSMContext):
    question1 = "–í–æ–ø—Ä–æ—Å 1/5\n" \
                "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –≤–∞–º –∫–≤–µ—Å—Ç!\n\n" \
                "–ò–≥—Ä–∞–ª–∏ —É –Ω–∞—Å –∏–ª–∏ –Ω–µ—Ç?"
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é "–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–µ—Å—Ç üîç"')
    await state.set_state(UserState.played)
    await callback.message.answer(question1, reply_markup=kb.playedBefore, parse_mode='HTML')


@router.message(UserState.played)
async def played_before(message: Message, state: FSMContext):
    text = message.text.capitalize().strip()
    if re.match("(–î–∞|–ù–µ—Ç)", text):
        await state.update_data(played=text)
        await state.set_state(UserState.age)
        question2 = "–í–æ–ø—Ä–æ—Å 2/5\n" \
                    "–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?"
        await message.answer(question2, reply_markup=kb.playersAge, parse_mode='HTML')
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–∞ –∏–ª–∏ –ù–µ—Ç.")


@router.message(UserState.age)
async def players_age(message: Message, state: FSMContext):
    text = message.text.strip()
    if re.match("(14+|18+)", text):
        await state.update_data(age=message.text)
        await state.set_state(UserState.players)
        question3 = "–í–æ–ø—Ä–æ—Å 3/5\n" \
                    "–°–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ?\n" \
                    "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2-—Ö\n\n" \
                    "‚ùóÔ∏è–ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É‚ùóÔ∏è\n" \
                    "–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ <b>2-3</b> —á–µ–ª–æ–≤–µ–∫, —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è <b>6000</b> —Ä—É–±–ª–µ–π."
        await message.answer(question3, reply_markup=kb.removeKeyboard, parse_mode='HTML')
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. 14+ –∏–ª–∏ 18+")


@router.message(UserState.players)
async def players_count(message: Message, state: FSMContext):
    text = message.text.strip()
    if text.isdigit() and 2 <= int(text) <= 15:
        await state.update_data(players=message.text)
        await state.set_state(UserState.scary)
        question4 = "–í–æ–ø—Ä–æ—Å 4/5\n" \
                    "–°—Ç—Ä–∞—à–Ω—ã–π –∫–≤–µ—Å—Ç –∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å?"
        await message.answer(question4, reply_markup=kb.playerScary, parse_mode='HTML')
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ß–∏—Å–ª–æ –æ—Ç 2-—Ö –¥–æ 15-—Ç–∏.")


@router.message(UserState.scary)
async def player_scary(message: Message, state: FSMContext):
    text = message.text.strip().capitalize()
    if re.match("(–°—Ç—Ä–∞—à–Ω—ã–π|–ù–µ —Å—Ç—Ä–∞—à–Ω—ã–π)", text):
        await state.update_data(scary=message.text)
        await state.set_state(UserState.playerContact)
        question5 = ("–í–æ–ø—Ä–æ—Å 5/5\n"
                     "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, "
                     "–µ—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79123456789")
        await message.answer(question5, reply_markup=kb.playerContact, parse_mode='HTML')
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –°—Ç—Ä–∞—à–Ω—ã–π –∏–ª–∏ –ù–µ —Å—Ç—Ä–∞—à–Ω—ã–π.")


@router.message(UserState.playerContact, F.contact | F.text)
async def player_contact(message: Message, state: FSMContext):
    data_updated = False

    if message.contact:
        await state.update_data(playerContact=message.contact.phone_number)
        data_updated = True
    elif message.text and re.match("^\d{11}$", message.text):
        await state.update_data(playerContact=message.text)
        data_updated = True

    if data_updated:
        await state.set_state(UserState.quest)
        data = await state.get_data()
        suitable_quests = await filter_answers(data)
        if suitable_quests:
            await message.answer("–í–æ—Ç —á—Ç–æ –¥–ª—è –≤–∞—Å –º—ã –Ω–∞—à–ª–∏:", reply_markup=kb.removeKeyboard)
            for quest in suitable_quests:
                quest_text = f"<u>–ù–∞–∑–≤–∞–Ω–∏–µ</u>: \"<code>{quest['name']}</code>\"\n<u>–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞</u>:\n{quest['desc']}"
                photo_path = './images/' + quest['image']
                if os.path.isfile(photo_path):
                    fs_input_photo = FSInputFile(photo_path)
                    await message.answer_photo(photo=fs_input_photo, caption=quest_text, parse_mode='html',
                                               reply_markup=kb.reservation_kb(quest['name']))
                else:
                    print("Photo file does not exist:", photo_path)
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–≤–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                                 "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É +7 911 488 5644, "
                                 "–∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –≤–∞—Å –ø–æ–¥–±–µ—Ä–µ–º!", reply_markup=kb.removeKeyboard)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, "
                             "–µ—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79123456789")


async def filter_answers(data):
    filtered_quests = []
    user_age = 0
    for quest in quests.values():
        match = True
        for key, value in data.items():
            if key == 'age':
                quest_age = quest.get('age')
                user_age = value
                if user_age == '14+':
                    if quest_age == '18+':
                        match = False
                        break

                if user_age == '18+':
                    if quest_age == '14+' or quest_age == '14+':
                        continue
            elif key == 'played':
                quest_played = quest.get('played')
                user_played = value.capitalize()
                if user_played == '–ù–µ—Ç':
                    if quest_played == '–î–∞':
                        match = False
                        break
            elif key == 'players':
                user_players = int(value)
                quest_players = quest.get('players')
                quest_min_players, quest_max_players = map(int, quest_players.split('-'))
                if not (quest_min_players <= user_players <= quest_max_players):
                    match = False
                    break
            elif key == 'scary':
                quest_scary = quest.get('scary').capitalize()
                user_scary = value.capitalize()

                if user_scary == '–°—Ç—Ä–∞—à–Ω—ã–π' and user_age == '14+':
                    if quest.get('name') in ['–ë–µ–ª–∞—è –¥–∞–º–∞', 'Among Us']:
                        match = False
                        break

                if user_scary in ['–ù–µ —Å—Ç—Ä–∞—à–Ω—ã–π', '–°—Ç—Ä–∞—à–Ω—ã–π'] and user_age == '14+':
                    continue

                if user_age == '18+':
                    if user_scary == '–°—Ç—Ä–∞—à–Ω—ã–π':
                        if quest_scary == '–ù–µ —Å—Ç—Ä–∞—à–Ω—ã–π':
                            match = False
                            break

        if match:
            filtered_quests.append(quest)

    return filtered_quests


@router.callback_query(F.data.startswith('select_date:'))
async def select_date(callback: CallbackQuery, state: FSMContext):
    selected_quest = callback.data.split(':')[-1]
    today = datetime.date.today()
    month = today.month
    year = today.year
    today_message = (f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                     f'–∫ –Ω–∞–º –ª–∏—á–Ω–æ, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–∞–º –æ–∫–æ—à–∫–æ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è.‚ò∫Ô∏è\n'
                     f'<code>+7 911 488 5644</code> –∏–ª–∏ <a href="https://t.me/QuestCenter39">–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º </a>')
    await state.update_data(quest=selected_quest)
    await state.set_state(UserState.date)
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–≤–µ—Å—Ç: ' + selected_quest)
    await callback.message.answer(today_message, parse_mode='HTML')
    available_months = await get_available_months()
    available_months = [month.split(' ')[0] + ' ' + month.split(' ')[1] for month in available_months]
    # print(available_months)
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–≤–µ—Å—Ç–∞ \"{selected_quest}\":",
                                  reply_markup=await kb.calendar_kb(month, year, available_months))


@router.callback_query(F.data.startswith(('prev_', 'next_')))
async def handle_calendar_callback(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split('_')
    data = await state.get_data()
    quest = data.get('quest', None)
    month = int(data_parts[-2])
    year = int(data_parts[-1])
    today = datetime.date.today()

    # print(data_parts, month, year)

    available_months = await get_available_months()
    available_months = [month.split(' ')[0] + ' ' + month.split(' ')[1] for month in available_months]

    if callback.data.startswith('prev_'):
        if year < today.year or (year == today.year and month <= today.month):
            await callback.answer(f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É')
            return
        month -= 1
        if month == 0:
            month = 12
            year -= 1
        if f'{translate_months(month)} {year}' not in available_months:
            await callback.answer(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {translate_months(month)} {year}')
            return
        markup = await kb.calendar_kb(month, year, available_months)
        await callback.answer(f'–í—ã —Å–º–µ–Ω–∏–ª–∏ –º–µ—Å—è—Ü –Ω–∞ {translate_months(month)}')
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–≤–µ—Å—Ç–∞ \"{quest}\":",
                                         reply_markup=markup)
    elif callback.data.startswith('next_'):
        month += 1
        if month == 13:
            month = 1
            year += 1
        if f'{translate_months(month)} {year}' not in available_months:
            await callback.answer(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {translate_months(month)} {year}')
            return
        markup = await kb.calendar_kb(month, year, available_months)
        await callback.answer(f'–í—ã —Å–º–µ–Ω–∏–ª–∏ –º–µ—Å—è—Ü –Ω–∞ {translate_months(month)}')
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–≤–µ—Å—Ç–∞ \"{quest}\":",
                                         reply_markup=markup)


@router.callback_query(F.data.startswith('select_day:'))
async def select_day(callback: CallbackQuery, state: FSMContext):
    date = callback.data.split(':')[-1]
    data = await state.get_data()
    quest = data.get('quest')
    day, month, year = map(int, date.split('.'))
    selected_date = datetime.date(year, month, day)

    weekday = selected_date.strftime('%A')
    weekday = translate_to_russian(weekday)
    day_of_month = selected_date.strftime('%d')
    month = selected_date.strftime('%m')
    year = selected_date.year
    date = f'{day_of_month}.{month}.{year}'
    await state.update_data(date=date)
    await callback.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {weekday}, {day_of_month}.{month}.{year}', parse_mode='HTML',
                                     reply_markup=kb.selectday_kb(quest))


@router.callback_query(F.data == 'select_time')
async def select_time(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.time)
    await callback.message.edit_text('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –í—ã–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è...', reply_markup=None)
    data = await state.get_data()
    quest = data.get('quest')

    try:
        response = await get_available_times(data)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=kb.selecttime_kb(response, quest),
            parse_mode='HTML')
    except Exception as e:
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=None)


async def get_available_times(data):
    return await asyncio.to_thread(sync_get_available_times, data)


def sync_get_available_times(data):
    quest = data.get('quest')
    date = data.get('date')
    day, month, year = map(int, date.split('.'))
    selected_date = datetime.date(year, month, day)
    weekday = selected_date.strftime('%A')
    weekday = translate_to_russian(weekday)
    date = f'{weekday} {date}'
    month_name = translate_months(month)
    wk = f'{month_name} {year}'
    gc = gspread.service_account(filename="./app/creds.json")
    spreadsheet = gc.open("–ö–≤–µ—Å—Ç—ã")
    sheet = spreadsheet.worksheet(wk)
    first_row_values = sheet.row_values(1)
    rows_to_check = []
    two_builds = False
    for quest_key, quest_value in quests.items():
        if quest_value.get('name') == quest:
            quest_build = quest_value.get('build')
            if quest_build:
                quest_build = quest_build.split(', ')
                if '1' in quest_build and '2' in quest_build:
                    rows_to_check = [3, 10, 17, 24, 31, 38, 45, 52, 59, 66, 73, 80, 87, 94]
                    two_builds = True
                    break
                elif '1' in quest_build:
                    rows_to_check = [3, 17, 31, 45, 59, 73, 87]
                    break
                elif '2' in quest_build:
                    rows_to_check = [10, 24, 38, 52, 66, 80, 94]
                    break

    time_kb = []

    if date in first_row_values:
        col_index = first_row_values.index(date) + 2
        if two_builds:
            for i in range(0, len(rows_to_check) - 1, 2):
                value1 = sheet.cell(rows_to_check[i], col_index).value
                value2 = sheet.cell(rows_to_check[i + 1], col_index).value
                if value1 is None or value2 is None:
                    hour = 12 + (i // 2) * 2
                    time_kb.append(f"{hour % 24:02d}:00")
        else:
            count = 0
            for row in rows_to_check:
                value = sheet.cell(row, col_index).value
                if value is None:
                    hour = (0 if count == 7 else 12 + count * 2) % 24
                    time_kb.append(f"{hour:02d}:00")
                count += 1

    return time_kb


@router.callback_query(F.data.startswith('save_time.'))
async def select_time(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã –Ω–∞—á–∞–ª–∏ –ø–ª–∞—Ç–µ–∂')
    time = callback.data.split('.')[-1]
    await state.update_data(time=time)
    await state.set_state(UserState.paid)
    data = await state.get_data()
    # print(data)
    quest = data.get('quest')
    date = data.get('date')
    players = data.get('players')
    played = data.get('played')
    age = data.get('age')
    contact = data.get('playerContact')
    user_id = callback.from_user.id

    link, payment_id = create_link(quest)
    data = [user_id, quest, date, time, payment_id, players, played, age, contact]
    user = await rq.get_user(user_id)
    if user.balance < 3000:
        payment_message = (f'–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–æ–Ω–∏ <b>–ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ</b> - '
                           f'–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è <b>3000‚ÇΩ</b>, –æ—Å—Ç–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–∞ –º–µ—Å—Ç–µ!\n–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:')
        await callback.message.edit_text(payment_message, reply_markup=kb.payment_kb(link), parse_mode='HTML')
        await asyncio.create_task(check_payment(callback.message, data))
        await state.clear()
    else:
        await rq.set_payment(user_id, quest, date, time, payment_id, 'succeeded')
        await paste_data(quest, players, played, age, contact, date, time)
        balance = user.balance - 3000
        await rq.set_balance(user_id, balance)
        message_text = (f'–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n'
                        f'–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Ä—Ñ–æ–º–∞–Ω—Å "<code>{quest}</code>" –Ω–∞ <b>{date} –≤ {time}</b>‚úÖ\n'
                        f'–ñ–¥–µ–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: –¢–µ–Ω–∏—Å—Ç–∞—è –ê–ª–ª–µ—è 28-30üìç\n\n'
                        f'–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å—ã –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n\n'
                        f'–¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º <a href="t.me/qquest_center39">–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–º</a>.'
                        f' –¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ–±–ª–∏–∂–µ.ü´∂')
        await callback.message.edit_text(message_text, parse_mode="HTML")


@router.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery):
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é "–ü—Ä–æ—Ñ–∏–ª—å üë§"')
    user = await rq.get_user(callback.from_user.id)
    questscount = await rq.get_quests(callback.from_user.id)
    reservations = await rq.get_reservations(callback.from_user.id)
    message = (f'–ü—Ä–æ—Ñ–∏–ª—å üë§:\n'
               f' –í–∞—à–µ –∏–º—è: {user.first_name}\n'
               f' –í–∞—à ID: {user.tg_id}\n'
               f' –í–∞—à –Ω–∏–∫: @{user.username}\n'
               f' –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ\n'
               f' –ö—É–ø–ª–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: {questscount}\n')
    #
    if reservations:
        message += f' –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã: \n'
        for quest in reservations:
            message += f'   - ¬´<b>{quest.quest}</b>¬ª –Ω–∞ {quest.payment_data} –≤ {quest.time}\n'
    else:
        message += f' –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–≤–µ—Å—Ç –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω'

    await callback.message.edit_text(message, reply_markup=kb.profile, parse_mode='HTML')


@router.callback_query(F.data == 'get_contacts')
async def get_contacts(call):
    message = (f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á–µ—Å—Ç—å –ø—É–Ω–∫—Ç ¬´–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã¬ª (FAQ).\n'
               f'–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –∏–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É '
               f'<u><code>+7 911 488 5644</code></u> –∏–ª–∏ <a href=\"https://t.me/QuestCenter39\">–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º</a>.')
    await call.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é "–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû"')
    await call.message.edit_text(message, reply_markup=kb.getContacts, parse_mode='HTML')


@router.callback_query(F.data == 'get_faq')
async def get_faq(call):
    message = (
        f'–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞'
        f' <a href="https://telegra.ph/FAQ-CHasto-zadavaemye-voprosy-03-17-5">–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</a>')
    await call.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é "FAQ ‚ùì"')
    await call.message.edit_text(message, reply_markup=kb.getFaq, parse_mode='HTML')


@router.callback_query(F.data == 'buy_cert')
async def buy_cert(call):
    await call.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é "–ö—É–ø–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç üíº"')
    message = (f'–í—ã–±–∏—Ä–∞—Ç—å —Å—é–∂–µ—Ç –∏ –¥–µ–Ω—å –∏–≥—Ä—ã —Å–∞–º–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ –æ–¥–∞—Ä–∏–≤–∞–µ–º–æ–º—É, –µ–º—É –æ—Å—Ç–∞–Ω–µ—Ç—Å—è '
               f'–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π —Å–µ–∞–Ω—Å –∏ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –∏–≥—Ä—É —Å–æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–æ–π.\n\n'
               f'–ú—ã –º–æ–∂–µ–º –ø—Ä–∏–≤–µ–∑—Ç–∏ –µ–≥–æ –≤–∞–º –ø—Ä—è–º–æ –¥–æ–º–æ–π (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞), –ª–∏–±–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ üì≤\n\n'
               f'–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –º–æ–∂–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:\n\nüìç–¢–µ–Ω–∏—Å—Ç–∞—è –∞–ª–ª–µ—è, 28-30\n\n'
               f'–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–≤–æ–Ω–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É <u><code>+7 911 488 5644</code></u> –∏–ª–∏ '
               f'<a href=\"https://t.me/QuestCenter39\">–Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–º</a>.')
    await call.message.edit_text(message, reply_markup=kb.buyCert, parse_mode='HTML')


@router.callback_query(F.data == 'quests_history')
async def quests_history(call):
    await call.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é "–ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤ üìú"')
    message = "–í–∞—à–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:\n"
    get_quests_history = await rq.get_quests_history(call.from_user.id)

    if get_quests_history:
        for quest in get_quests_history:
            message += f" - <b>–ö–≤–µ—Å—Ç</b>: {quest.quest}, <b>–î–∞—Ç–∞</b>: {quest.payment_data}, <b>–í—Ä–µ–º—è</b>: {quest.time}\n"
    else:
        message += "–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞!"

    await call.message.edit_text(message, reply_markup=kb.questsHistory, parse_mode='HTML')
