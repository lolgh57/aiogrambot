import asyncio
import datetime

import gspread
import yookassa
import app.database.requests as rq

from app.quests import quests
from config import SHOP_ID, SECRET_KEY


def translate_months(month: int) -> str:
    month = str(month).zfill(2)
    months = {
        '01': '–Ø–Ω–≤–∞—Ä—å',
        '02': '–§–µ–≤—Ä–∞–ª—å',
        '03': '–ú–∞—Ä—Ç',
        '04': '–ê–ø—Ä–µ–ª—å',
        '05': '–ú–∞–π',
        '06': '–ò—é–Ω—å',
        '07': '–ò—é–ª—å',
        '08': '–ê–≤–≥—É—Å—Ç',
        '09': '–°–µ–Ω—Ç—è–±—Ä—å',
        '10': '–û–∫—Ç—è–±—Ä—å',
        '11': '–ù–æ—è–±—Ä—å',
        '12': '–î–µ–∫–∞–±—Ä—å'
    }
    return months.get(month, month)


def translate_to_russian(weekday: str) -> str:
    days = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    return days.get(weekday, weekday)


def get_available_sheets():
    gc = gspread.service_account(filename="./app/creds.json")
    spreadsheet = gc.open("–ö–≤–µ—Å—Ç—ã")
    sheets = spreadsheet.worksheets()
    print([sheet.title for sheet in sheets[1:]])
    return [sheet.title for sheet in sheets[1:]]


async def get_available_months():
    return await asyncio.to_thread(get_available_sheets)


def create_link(quest_name: str):
    yookassa.Configuration.account_id = SHOP_ID
    yookassa.Configuration.secret_key = SECRET_KEY
    payment = yookassa.Payment.create({
        "amount": {
            "value": 3000,
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/questcenter_bot"
        },
        "capture": True,
        "description": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ - ¬´" + quest_name + "¬ª",
    })

    url = payment.confirmation.confirmation_url
    return url, payment.id


async def check_payment(message, data):
    user_id, quest, date, time, payment_id, players, played, age, contact = data
    interval = 10
    max_time = 600
    time_elapsed = 0
    while time_elapsed < max_time:
        try:
            payment = yookassa.Payment.find_one(payment_id)
            print(payment.status, time_elapsed)
            if payment.status == 'succeeded':
                if await paste_data(quest, players, played, age, contact, date, time):
                    await rq.set_payment(user_id, quest, date, time, payment_id, payment.status)
                    message_text = (f'–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n'
                                    f'–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Ä—Ñ–æ–º–∞–Ω—Å "<code>{quest}</code>" –Ω–∞ <b>{date} –≤ {time}</b>‚úÖ\n'
                                    f'–ñ–¥–µ–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: –¢–µ–Ω–∏—Å—Ç–∞—è –ê–ª–ª–µ—è 28-30üìç\n\n'
                                    f'–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å—ã –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n\n'
                                    f'–¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º <a href="t.me/qquest_center39">–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–º</a>.'
                                    f' –¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ–±–ª–∏–∂–µ.ü´∂')
                    await message.edit_text(message_text, parse_mode="HTML")
                    return
                else:
                    await message.answer('–≠—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.\n'
                                         '–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å—á—ë—Ç –≤ –±–æ—Ç–µ.')
                    user = await rq.get_user(user_id)
                    balance = user.balance + 3000
                    await rq.set_balance(user_id, balance)
                    return
            elif payment.status == 'canceled':
                message_text = (f'–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.‚òπÔ∏è\n'
                                f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n'
                                f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É <code>+7 911 488 5644</code> '
                                f'–∏–ª–∏ <u><a href="t.me/QuestCenter39">–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º</a></u>.')
                await message.edit_text(message_text, parse_mode="HTML")
                return
        except AttributeError:
            message_text = (f'–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.‚òπÔ∏è\n'
                            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n'
                            f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É <code>+7 911 488 5644</code> '
                            f'–∏–ª–∏ <u><a href="t.me/QuestCenter39">–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º</a></u>.')
            await message.edit_text(message_text, parse_mode="HTML")
            return

        await asyncio.sleep(interval)
        time_elapsed += interval
    return

# async def check_payment(message, data):
#     user_id, quest, date, time, payment_id, players, played, age, contact = data
#     interval = 10
#     max_time = 600
#     time_elapsed = 0
#     while time_elapsed < max_time:
#         try:
#             payment = yookassa.Payment.find_one(payment_id)
#             print(payment.status, time_elapsed)
#             if payment.status == 'succeeded':
#                 if await paste_data(quest, players, played, age, contact, date, time):
#                     await rq.set_payment(user_id, quest, date, time, payment_id, payment.status)
#                     message_text = (f'–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n'
#                                     f'–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Ä—Ñ–æ–º–∞–Ω—Å "<code>{quest}</code>" –Ω–∞ <b>{date} –≤ {time}</b>‚úÖ\n'
#                                     f'–ñ–¥–µ–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: –¢–µ–Ω–∏—Å—Ç–∞—è –ê–ª–ª–µ—è 28-30üìç\n\n'
#                                     f'–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å—ã –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n\n'
#                                     f'–¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º <a href="t.me/qquest_center39">–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–º</a>.'
#                                     f' –¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ–±–ª–∏–∂–µ.ü´∂')
#                     await message.edit_text(message_text, parse_mode="HTML")
#                     return
#                 else:
#                     await message.answer('–≠—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.\n'
#                                          '–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å—á—ë—Ç –≤ –±–æ—Ç–µ.')
#                     user = await rq.get_user(user_id)
#                     balance = user.balance + 3000
#                     await rq.set_balance(user_id, balance)
#                     return
#             elif payment.status == 'canceled':
#                 message_text = (f'–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.‚òπÔ∏è\n'
#                                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n'
#                                 f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É <code>+7 911 488 5644</code> '
#                                 f'–∏–ª–∏ <u><a href="t.me/QuestCenter39">–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º</a></u>.')
#                 await message.edit_text(message_text, parse_mode="HTML")
#                 return
#         except AttributeError:
#             message_text = (f'–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.‚òπÔ∏è\n'
#                             f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n'
#                             f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É <code>+7 911 488 5644</code> '
#                             f'–∏–ª–∏ <u><a href="t.me/QuestCenter39">–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º</a></u>.')
#             await message.edit_text(message_text, parse_mode="HTML")
#             return
#
#         await asyncio.sleep(interval)
#         time_elapsed += interval
#     return


async def paste_data(quest, players, played, age, contact, date, time):
    userBuild = 0
    userQuest = quest
    requests = []
    timeError = False
    day, month, year = map(int, date.split('.'))
    selected_date = datetime.date(year, month, day)
    weekday = selected_date.strftime('%A')
    weekday = translate_to_russian(weekday)
    date = f'{weekday} {date}'
    month = translate_months(month)
    wk = f'{month} {year}'
    pasteData = [quest, players, played, age, contact, '3.000']

    gc = gspread.service_account(filename="./app/creds.json")
    spreadsheet = gc.open("–ö–≤–µ—Å—Ç—ã")
    sheet = spreadsheet.worksheet(wk)

    for quest in quests.values():
        if userQuest == quest['name']:
            userBuild = quest['build']

    row_index = sheet.find(time).row + 1
    col_index = sheet.find(date).col + 1
    # print(sheet.cell(row_index, col_index).value, sheet.cell(row_index, col_index), row_index, col_index)

    if userBuild == '1':
        if sheet.cell(row_index, col_index).value is None:
            for value in pasteData:
                if isinstance(value, int):
                    value = str(value)

                requests.append({
                    'updateCells': {
                        'range': {'sheetId': sheet.id, 'startRowIndex': row_index - 1, 'endRowIndex': row_index,
                                  'startColumnIndex': col_index - 1,
                                  'endColumnIndex': col_index},
                        'rows': [{'values': [{'userEnteredValue': {'stringValue': value}}]}],
                        'fields': 'userEnteredValue'
                    }
                })
                row_index += 1
        else:
            timeError = True
    elif userBuild == '2':
        row_index += 7
        if sheet.cell(row_index, col_index).value is None:
            for value in pasteData:
                if isinstance(value, int):
                    value = str(value)

                requests.append({
                    'updateCells': {
                        'range': {'sheetId': sheet.id, 'startRowIndex': row_index - 1, 'endRowIndex': row_index,
                                  'startColumnIndex': col_index - 1,
                                  'endColumnIndex': col_index},
                        'rows': [{'values': [{'userEnteredValue': {'stringValue': value}}]}],
                        'fields': 'userEnteredValue'
                    }
                })
                row_index += 1
        else:
            timeError = True
    elif userBuild == '1, 2':
        if sheet.cell(row_index, col_index).value is None:
            for value in pasteData:
                if isinstance(value, int):
                    value = str(value)

                requests.append({
                    'updateCells': {
                        'range': {'sheetId': sheet.id, 'startRowIndex': row_index - 1, 'endRowIndex': row_index,
                                  'startColumnIndex': col_index - 1,
                                  'endColumnIndex': col_index},
                        'rows': [{'values': [{'userEnteredValue': {'stringValue': value}}]}],
                        'fields': 'userEnteredValue'
                    }
                })
                row_index += 1
        elif sheet.cell(row_index + 7, col_index).value is None:
            for value in pasteData:
                if isinstance(value, int):
                    value = str(value)

                requests.append({
                    'updateCells': {
                        'range': {'sheetId': sheet.id, 'startRowIndex': row_index - 1, 'endRowIndex': row_index,
                                  'startColumnIndex': col_index - 1,
                                  'endColumnIndex': col_index},
                        'rows': [{'values': [{'userEnteredValue': {'stringValue': value}}]}],
                        'fields': 'userEnteredValue'
                    }
                })
                row_index += 1
        else:
            timeError = True

    if timeError:
        return False
    else:
        sheet.spreadsheet.batch_update({'requests': requests})
        return True

